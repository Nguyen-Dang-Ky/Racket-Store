// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Serberus_Racket_Store.Data;

#nullable disable

namespace Serberus_Racket_Store.Migrations
{
    [DbContext(typeof(SeberusDbContext))]
    [Migration("20250623081643_newSeberus")]
    partial class newSeberus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Serberus_Racket_Store.Brands", b =>
                {
                    b.Property<int>("brandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brandId"));

                    b.Property<string>("brandCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('US', FORMAT(brandId, 'D2'))");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("brandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Serberus_Racket_Store.CartItems", b =>
                {
                    b.Property<int>("cartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartItemId"));

                    b.Property<string>("cartItemCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('CA', FORMAT(cartItemId, 'D2'))");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("racketId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("cartItemId");

                    b.HasIndex("racketId");

                    b.HasIndex("userId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Serberus_Racket_Store.OrderItems", b =>
                {
                    b.Property<int>("orderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderItemId"));

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("orderItemCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('OI', FORMAT(orderItemId, 'D2'))");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("racketId")
                        .HasColumnType("int");

                    b.HasKey("orderItemId");

                    b.HasIndex("orderId");

                    b.HasIndex("racketId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Orders", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderId"));

                    b.Property<string>("orderCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('OR', FORMAT(orderId, 'D2'))");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Rackets", b =>
                {
                    b.Property<int>("racketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("racketId"));

                    b.Property<string>("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("brandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("racketCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('RA', FORMAT(racketId, 'D2'))");

                    b.Property<string>("racketName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("racketId");

                    b.HasIndex("brandId");

                    b.ToTable("Rackets");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Reviews", b =>
                {
                    b.Property<int>("reviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reviewId"));

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("racketId")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("reviewCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('RE', FORMAT(reviewId, 'D2'))");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("reviewId");

                    b.HasIndex("racketId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Shipping_Info", b =>
                {
                    b.Property<int>("shippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("shippingId"));

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("receiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shippingCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('SH', FORMAT(shippingId, 'D2'))");

                    b.Property<decimal>("shippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("shippingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shippingId");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("Shippinginfo");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Users", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('US', FORMAT(userId, 'D2'))");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Serberus_Racket_Store.CartItems", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Rackets", "Rackets")
                        .WithMany("CartItems")
                        .HasForeignKey("racketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serberus_Racket_Store.Users", "Users")
                        .WithMany("CartItems")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rackets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Serberus_Racket_Store.OrderItems", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serberus_Racket_Store.Rackets", "Rackets")
                        .WithMany("OrderItems")
                        .HasForeignKey("racketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Rackets");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Orders", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Rackets", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Brands", "Brands")
                        .WithMany("Rackets")
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Reviews", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Rackets", "Rackets")
                        .WithMany("Reviews")
                        .HasForeignKey("racketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serberus_Racket_Store.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rackets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Shipping_Info", b =>
                {
                    b.HasOne("Serberus_Racket_Store.Orders", "Orders")
                        .WithOne("Shipping_Info")
                        .HasForeignKey("Serberus_Racket_Store.Shipping_Info", "orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Brands", b =>
                {
                    b.Navigation("Rackets");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Orders", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Shipping_Info")
                        .IsRequired();
                });

            modelBuilder.Entity("Serberus_Racket_Store.Rackets", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Serberus_Racket_Store.Users", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
